#maxint=30.

row(0..21).

column(0..9). 

cell(X,Y):- row(X), column(Y).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ( GUESS ) 

% posiziona le forme / Place(ID_PIECE,X_POS,Y_POS)
% la cella(0,0) che compone la forma è considerata come cella di pivot  


%place(F,X,Y,C) v notPlace(F,X,Y,C) :- shape(F,_,_,C),cell(X,Y), X<=9.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ( CECK ) 

% Questi vincoli evitano la sovrapposizione delle formeoccupata(0,0,x).

% impossibile che il pivot di ciascuna forma occupi due posizioni diverse
:- place(F,X1,_,_), place(F,X2,_,_), X1 != X2.
:- place(F,_,Y1,_), place(F,_,Y2,_), Y1 != Y2.
:- place(F,_,_,C1), place(F,_,_,C2), C1 != C2.

% occupied(X_POS,Y_POS,ID_PIECE) - restituisce le celle occupate da ciascuna forma
occupied(X,Y,F,C) :- place(F,X,Y,C).
occupied(A,B,F,C) :- place(F,R0,C0,C), shape(F,R1,C1,C), X=R0+R1, Y=C0+C1, A=X-2,B = Y-2.



blabla(N) :- #count{A,B:occupied(A,B,F,_)}=N,#int(N).

:- blabla(N), N != 4.



 
%impossibile che la stessa cella sia occupata da forme diverse

:- occupied(X,Y,F1,C), occupied1(X,Y,F2), F1 != F2.

% Tutte le forme date devono essere posizionate all'interno della matrice
placed(F) :- place(F,_,_,_).
:- shape(F,_,_,_), not placed(F).

% Ciascuna forma non può sforare la matrice
:- occupied(X,Y,_,_), not cell(X,Y).

%Restituisce solo gli indici occupati
occupiedIndex(X,Y):-occupied1(X,Y,_).
occupiedIndex(X,Y):-occupied(X,Y,_,_).

% Restituisce le celle vuote
empty(X,Y):-cell(X,Y),not occupiedIndex(X,Y).

% Restituisce i componenti più bassi del pezzo in input

smallest(X,Y,F,C):-occupied(X,Y,F,C), not smaller(X,Y,F,C).

smaller(X,Y,F,C):-occupied(X,Y,F,C),occupied(X1,Y,F,C), X1<X.


% Non è possibile piazzare un pezzo se non c'è un cammino adeguato

:-occupied(X,Y,_,_), occupied1(X1,Y,_), X1>X.
 
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% ( WEAK CONSTRAINT ) 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% 1 minimizzare numero spazi vuoti su righe occupate ( a livello 1 poichè meno importante )

%Celle vuote sulle righe occupate
emptyRow(X,Y):-empty(X,Y),occupiedRow(X1),X=X1.

:~emptyRow(X,Y). [1:1]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% 2 evita di lasciare pezzi sospesi , minimizza i vuoti ( crea configurazioni migliori ) .

:~smallest(X,Y,F,C),emptyCont(_,Y). [1:4]

:~smallest(X,Y,F,C),empty(X1,Y), X1=X-1 . [1:5]

 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% 3 posizionare il più basso possibile il pezzo ( minimizzando il numero di righe della configurazione)

%occupiedRow(R):-occupied1(R,_,_).
occupiedRow(R):-occupied(X,_,_,_),cell(R,_),R<=X.
:~occupiedRow(R). [1:2]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% 4 massimizzare le righe occupate ( a livello 4 poichè la cosa piu importante )

%il numero N di celle occupate per ciascuna riga R 
numberFullCell(R,N) :- row(R),#count{C:occupiedIndex(R,C)}=N,#int(N).

% una riga è piena se il numero di celle piene è pari alle colonne
notFullRow(R):-numberFullCell(R,N),N != 10.

:~notFullRow(R). [1:3]
